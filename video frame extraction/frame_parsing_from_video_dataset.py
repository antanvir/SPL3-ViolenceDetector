# -*- coding: utf-8 -*-
"""frame_parsing_from_video_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IEdZjZZxEFgjoygA4S69FnlEYBs5sut6
"""

from google.colab import drive
# drive.mount('/content/drive')
drive.mount('/content/drive', force_remount=True)

dataset_paths = ["/content/drive/My Drive/_SPL3/Dataset/hockey-fight/fights/",
                 "/content/drive/My Drive/_SPL3/Dataset/hockey-fight/noFights/",
                 "/content/drive/My Drive/_SPL3/Dataset/movie-fight/fights/",
                 "/content/drive/My Drive/_SPL3/Dataset/movie-fight/noFights/",
                 "/content/drive/My Drive/_SPL3/Dataset/violent-flow/fights/",
                 "/content/drive/My Drive/_SPL3/Dataset/violent-flow/noFights/",
                 "/content/drive/My Drive/_SPL3/Dataset/validationDataset/hockey-fight/fights/",
                 "/content/drive/My Drive/_SPL3/Dataset/validationDataset/hockey-fight/noFights/",
                 "/content/drive/My Drive/_SPL3/Dataset/validationDataset/movie-fight/fights/",
                 "/content/drive/My Drive/_SPL3/Dataset/validationDataset/movie-fight/noFights/",
                 "/content/drive/My Drive/_SPL3/Dataset/validationDataset/violent-flow/fights/",
                 "/content/drive/My Drive/_SPL3/Dataset/validationDataset/violent-flow/noFights/"]

dataframe_paths = ["/content/drive/My Drive/_SPL3/Dataframes/hockey-fight/fights/",
                 "/content/drive/My Drive/_SPL3/Dataframes/hockey-fight/noFights/",
                 "/content/drive/My Drive/_SPL3/Dataframes/movie-fight/fights/",
                 "/content/drive/My Drive/_SPL3/Dataframes/movie-fight/noFights/",
                 "/content/drive/My Drive/_SPL3/Dataframes/violent-flow/fights/",
                 "/content/drive/My Drive/_SPL3/Dataframes/violent-flow/noFights/",
                 "/content/drive/My Drive/_SPL3/Dataframes/validationDataset/hockey-fight/fights/",
                 "/content/drive/My Drive/_SPL3/Dataframes/validationDataset/hockey-fight/noFights/",
                 "/content/drive/My Drive/_SPL3/Dataframes/validationDataset/movie-fight/fights/",
                 "/content/drive/My Drive/_SPL3/Dataframes/validationDataset/movie-fight/noFights/",
                 "/content/drive/My Drive/_SPL3/Dataframes/validationDataset/violent-flow/fights/",
                 "/content/drive/My Drive/_SPL3/Dataframes/validationDataset/violent-flow/noFights/"]

'''

Better approach to visualise or monitor changes in
Google Drive directory or files.

'''

import os
import cv2
from os import path

drive.mount('/content/drive', force_remount=True)

dataset_path = "/content/drive/My Drive/_SPL3/Dataset/violent-flow/noFights/"
dataframe_path = "/content/drive/My Drive/_SPL3/Dataframes/violent-flow/noFights/"  

allFiles = os.listdir(dataset_path)
print("Dataset Path exists: ", path.exists(dataset_path))
print("Dataframe Path exists: ", path.exists(dataframe_path))
print("Total Files: ", len(allFiles))

for filename in allFiles:
    vidcap = cv2.VideoCapture(dataset_path + filename)
    # print("FPS rate of the video: ", vidcap.get(5)) # FPS property ID is 5
    count = 0
    
    while(vidcap.isOpened()):
        filenameWithoutExtension = filename.split(".")[0]  # without file extension
        # print(filename)
        success, frame = vidcap.read()
        if (count % 2) == 1 and success:
            if not cv2.imwrite("{}{}_{}.jpg".format(dataframe_path, filenameWithoutExtension, count), frame):
                raise Exception("Could not write image")
        elif not success:
            break
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
        count += 1
    vidcap.release()
print("Done writing: ", dataframe_path)

cv2.destroyAllWindows()

'''

For dataset path input & daraframe path output from array.
You may want to avoid this approach as File read-write in Google Drive is too slow.
You might not find the changes in Drive directory or Files for minutes or hours at worst scenerio.

'''

import os
import cv2
from os import path

drive.mount('/content/drive', force_remount=True)

# dataset_paths = [
#                  "/content/drive/My Drive/_SPL3/Dataset/validationDataset/hockey-fight/fights/",
#                  "/content/drive/My Drive/_SPL3/Dataset/validationDataset/hockey-fight/noFights/",
#                  "/content/drive/My Drive/_SPL3/Dataset/validationDataset/movie-fight/fights/",
#                  "/content/drive/My Drive/_SPL3/Dataset/validationDataset/movie-fight/noFights/",
#                  "/content/drive/My Drive/_SPL3/Dataset/validationDataset/violent-flow/fights/",
#                  "/content/drive/My Drive/_SPL3/Dataset/validationDataset/violent-flow/noFights/"]

# dataframe_paths = [
#                  "/content/drive/My Drive/_SPL3/Dataframes/validationDataset/hockey-fight/fights/",
#                  "/content/drive/My Drive/_SPL3/Dataframes/validationDataset/hockey-fight/noFights/",
#                  "/content/drive/My Drive/_SPL3/Dataframes/validationDataset/movie-fight/fights/",
#                  "/content/drive/My Drive/_SPL3/Dataframes/validationDataset/movie-fight/noFights/",
#                  "/content/drive/My Drive/_SPL3/Dataframes/validationDataset/violent-flow/fights/",
#                  "/content/drive/My Drive/_SPL3/Dataframes/validationDataset/violent-flow/noFights/"]

ind = 0
for dataset_path in dataset_paths:
    allFiles = os.listdir(dataset_path)
    print("Dataset Path exists: ", path.exists(dataset_path))
    print("Dataframe Path exists: ", path.exists(dataframe_paths[ind]))
    print("Total Files: ", len(allFiles))
    
    for filename in allFiles:
        vidcap = cv2.VideoCapture(dataset_path + filename)
        # print("FPS rate of the video: ", vidcap.get(5)) # FPS property ID is 5
        count = 0
        
        while(vidcap.isOpened()):
            filenameWithoutExtension = filename.split(".")[0]  # without file extension
            # print(filename)
            success, frame = vidcap.read()
            if (count % 2) == 1 and success:
              cv2.imwrite("{}{}_{}.jpg".format(dataframe_paths[ind], filenameWithoutExtension, count), frame)
            elif not success:
              break
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
            count += 1
        vidcap.release()
    print("Done: ", dataframe_paths[ind])
    ind += 1
cv2.destroyAllWindows()